--[[

 @  SourceLib v1.3
 @ Q:384232347
 @ by B1nk

--]]

assert(load(Base64Decode(""), nil, "bt", _ENV))()
--
