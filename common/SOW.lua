--[[

 @ SOW v1.2
 @ Q:384232347
 @ by B1nk

--]]

assert(load(Base64Decode(""), nil, "bt", _ENV))()
--
