--[[

 -- SOW 
 -- Version 1.1301
 -- by B1nk

--]]

assert(load(Base64Decode(""), nil, "bt", _ENV))()