--[[

 -- SourceLib_EN
 -- Version 1.2
 -- by B1nk

--]]

assert(load(Base64Decode(""), nil, "bt", _ENV))()