--[[

 -- Incomparable Syndra
 -- by B1nk

--]]

assert(load(Base64Decode("if myHero.charName~="Syndra"then return end local o=1.51 local t=true local M=myHero.name local e="Syndra"local a="https://raw.github.com/TheRealSource/public/master/common/SourceLib.lua"local n=LIB_PATH.."SourceLib.lua"if FileExist(n)then require("SourceLib")else DOWNLOADING_SOURCELIB=true DownloadFile(a,n,function()PrintChat("Required libraries downloaded successfully, please reload")end)end if DOWNLOADING_SOURCELIB then PrintChat("Downloading required libraries, please wait...")return end if t then SourceUpdater(e,o,"raw.github.com","/B1nk/BoL/master/"..e..".lua",SCRIPT_PATH..GetCurrentEnv().FILE_NAME,"/B1nk/BoL/master/version/"..e..".version"):CheckUpdate()end local e=Require("SourceLib")e:Add("vPrediction","https://raw.github.com/Hellsing/BoL/master/common/VPrediction.lua")e:Add("SOW","https://raw.github.com/Hellsing/BoL/master/common/SOW.lua")e:Check()if e.downloadNeeded==true then return end local u={ItemManager:GetItem("DFG"):GetId(),_Q,_W,_E,_R,_R,_R,_IGNITE}local i=1337 local t local a={[_Q]=790,[_W]=925,[_E]=700,[_R]=675}local e={[_Q]=125,[_W]=190,[_E]=45*.5,[_R]=1,[i]=60}local o={[_Q]=.6,[_W]=.25,[_E]=.25,[_R]=.25,[i]=1800}local r={[_Q]=math.huge,[_W]=1500,[_E]=2500,[_R]=1,[i]=1600}local P={"GiantWolf8.1.1","AncientGolem7.1.1","Wraith9.1.1","LizardElder10.1.1","Golem11.1.2","GiantWolf2.1.1","AncientGolem1.1.1","Wraith3.1.1","LizardElder4.1.1","Golem5.1.2","GreatWraith13.1.1","GreatWraith14.1.1"}local b={"annietibbers","shacobox","malzaharvoidling","heimertyellow","heimertblue","yorickdecayedghoul"}local n={}local d=6.9 local c=(a[_Q]+500)local f=0 local m=0 local h=0 local l=nil local C=0 local s=0 local g={}function OnLoad()print('<b><font color="#FF9999"> >>  Incomparable Syndra </font></b> <font color="#FF0000">1.5</font> <font color="#FF9999">Loaded !</font> ')print('<font color="#FFCC99"> >>  Only B1nk\'s Friends </font>'..tostring(M)..'<font color="#FFCC99"> Good Luck ! </font>')VP=VPrediction()SOWi=SOW(VP)STS=SimpleTS(STS_PRIORITY_LESS_CAST_MAGIC)DLib=DamageLib()DManager=DrawManager()Q=Spell(_Q,a[_Q],VIP_USER)W=Spell(_W,a[_W],false)W2=Spell(_W,a[_W],false)E=Spell(_E,a[_E],false)EQ=Spell(_E,a[_E],false)R=Spell(_R,a[_R],VIP_USER)if VIP_USER then Q:TrackCasting("SyndraQ")Q:RegisterCastCallback(OnCastQ)W:TrackCasting("SyndraW")W:RegisterCastCallback(function()end)W2:TrackCasting("syndrawcast")W2:RegisterCastCallback(OnCastW)E:TrackCasting({"SyndraE","syndrae5"})E:RegisterCastCallback(OnCastE)else WTrack=false end Q:SetSkillshot(VP,SKILLSHOT_CIRCULAR,e[_Q],o[_Q],r[_Q],false)W:SetSkillshot(VP,SKILLSHOT_CIRCULAR,e[_W],o[_W],r[_W],false)W2:SetSkillshot(VP,SKILLSHOT_CIRCULAR,e[_W],o[_W],r[_W],false)E:SetSkillshot(VP,SKILLSHOT_CONE,e[_E],o[_E],r[_E],false)EQ:SetSkillshot(VP,SKILLSHOT_LINEAR,70,o[_E],r[_E],false)Q:SetAOE(true)W:SetAOE(true)DLib:RegisterDamageSource(_Q,_MAGIC,30,40,_MAGIC,_AP,.6,function()return(player:CanUseSpell(_Q)==READY)end)DLib:RegisterDamageSource(_W,_MAGIC,40,40,_MAGIC,_AP,.7,function()return(player:CanUseSpell(_W)==READY)end)DLib:RegisterDamageSource(_E,_MAGIC,25,45,_MAGIC,_AP,.4,function()return(player:CanUseSpell(_E)==READY)end)DLib:RegisterDamageSource(_R,_MAGIC,45,45,_MAGIC,_AP,.2,function()return(player:CanUseSpell(_R)==READY)end)Menu=scriptConfig("Syndra","Syndra")Menu:addSubMenu("Orbwalking","Orbwalking")SOWi:LoadToMenu(Menu.Orbwalking)Menu:addSubMenu("Target selector","STS")STS:AddToMenu(Menu.STS)Menu:addSubMenu("Combo","Combo")Menu.Combo:addParam("UseQ","Use Q",SCRIPT_PARAM_ONOFF,true)Menu.Combo:addParam("UseW","Use W",SCRIPT_PARAM_ONOFF,true)Menu.Combo:addParam("UseE","Use E",SCRIPT_PARAM_ONOFF,true)Menu.Combo:addParam("UseEQ","Use EQ",SCRIPT_PARAM_ONOFF,true)Menu.Combo:addParam("UseR","Use R",SCRIPT_PARAM_ONOFF,true)Menu.Combo:addParam("Enabled","Use Combo!",SCRIPT_PARAM_ONKEYDOWN,false,32)Menu:addSubMenu("Harass","Harass")Menu.Harass:addParam("UseQ","Use Q",SCRIPT_PARAM_ONOFF,true)Menu.Harass:addParam("UseW","Use W",SCRIPT_PARAM_ONOFF,false)Menu.Harass:addParam("UseE","Use E",SCRIPT_PARAM_ONOFF,false)Menu.Harass:addParam("UseEQ","Use EQ",SCRIPT_PARAM_ONOFF,false)Menu.Harass:addParam("ManaCheck","Don't harass if mana < %",SCRIPT_PARAM_SLICE,0,0,100)Menu.Harass:addParam("Enabled","Harass!",SCRIPT_PARAM_ONKEYDOWN,false,string.byte("C"))Menu:addSubMenu("Farm","Farm")Menu.Farm:addParam("UseQ","Use Q",SCRIPT_PARAM_LIST,4,{"No","Freeze","LaneClear","Both"})Menu.Farm:addParam("UseW","Use W",SCRIPT_PARAM_LIST,4,{"No","Freeze","LaneClear","Both"})Menu.Farm:addParam("UseE","Use E",SCRIPT_PARAM_LIST,4,{"No","Freeze","LaneClear","Both"})Menu.Farm:addParam("ManaCheck2","Don't farm if mana < % (freeze)",SCRIPT_PARAM_SLICE,0,0,100)Menu.Farm:addParam("ManaCheck","Don't farm if mana < % (laneclear)",SCRIPT_PARAM_SLICE,0,0,100)Menu.Farm:addParam("Freeze","Farm freezing",SCRIPT_PARAM_ONKEYDOWN,false,string.byte("C"))Menu.Farm:addParam("LaneClear","Farm LaneClear",SCRIPT_PARAM_ONKEYDOWN,false,string.byte("V"))Menu:addSubMenu("JungleFarm","JungleFarm")Menu.JungleFarm:addParam("UseQ","Use Q",SCRIPT_PARAM_ONOFF,true)Menu.JungleFarm:addParam("UseW","Use W",SCRIPT_PARAM_ONOFF,true)Menu.JungleFarm:addParam("UseE","Use E",SCRIPT_PARAM_ONOFF,false)Menu.JungleFarm:addParam("Enabled","Farm!",SCRIPT_PARAM_ONKEYDOWN,false,string.byte("V"))Menu:addSubMenu("Ultimate","R")Menu.R:addSubMenu("Don't use R on","Targets")for n,e in ipairs(GetEnemyHeroes())do Menu.R.Targets:addParam(e.hash,e.charName,SCRIPT_PARAM_ONOFF,false)end Menu.R:addParam("CastR","Force ultimate cast",SCRIPT_PARAM_ONKEYDOWN,false,string.byte("J"))Menu.R:addParam("DontUseR","Don't use R in the next 10 seconds",SCRIPT_PARAM_ONKEYDOWN,false,string.byte("G"))Menu.Misc:addSubMenu("Anti-Gapclosers","AG")AntiGapcloser(Menu.Misc.AG,OnGapclose)Menu.Misc:addParam("MEQ","Manual E+Q Combo",SCRIPT_PARAM_ONKEYDOWN,false,string.byte("T"))Menu:addSubMenu("Drawings","Drawings")DManager:CreateCircle(myHero,SOWi:MyRange()+50,1,{255,255,255,255}):AddToMenu(Menu.Drawings,"AA Range",true,true,true)for n,e in pairs(a)do DManager:CreateCircle(myHero,e,1,{255,255,255,255}):AddToMenu(Menu.Drawings,SpellToString(n).." Range",true,true,true)end DManager:CreateCircle(myHero,c,1,{255,255,255,255}):AddToMenu(Menu.Drawings,"Q+E Range",true,true,true)Menu:addSubMenu("Debug","Debug")Menu.Debug:addParam("DebugBall","Track balls",SCRIPT_PARAM_ONOFF,false)Menu.Debug:addParam("DebugCast","Cast output",SCRIPT_PARAM_ONOFF,false)Menu.Debug:addParam("DebugQ","Draw Q prediction",SCRIPT_PARAM_ONOFF,false)DLib:AddToMenu(Menu.Drawings,u)EnemyMinions=minionManager(MINION_ENEMY,W.range,myHero,MINION_SORT_MAXHEALTH_DEC)JungleMinions=minionManager(MINION_JUNGLE,c,myHero,MINION_SORT_MAXHEALTH_DEC)PosiblePets=minionManager(MINION_OTHER,W.range,myHero,MINION_SORT_MAXHEALTH_DEC)PrintChat("Syndra: Loaded")end function OnRecvPacket(e)if e.header==112 then e.pos=1 local a=e:DecodeF()local e=e:Decode1()if a and e==1 then if not t then for e,t in ipairs(n)do if t.networkID==a then n[e].endT=os.clock()+d-GetLatency()/2e3 end end end t=objManager:GetObjectByNetworkId(a)else t=nil end end end function GetCombo()local e={}for a,n in ipairs(u)do table.insert(e,n)end for n=1,#GetValidBalls()do table.insert(e,_R)end return e end function GetValidBalls(e)local a={}for o,e in ipairs(n)do if(e['added']or e['startT']<=os.clock())and n[o]['endT']>=os.clock()and e['object']['valid']then if not t or e.object.networkID~=t.networkID then table.insert(a,e)end end end return a end function AddBall(a)for e=#n,1,-1 do if not n[e].added and GetDistanceSqr(n[e].object,a)<50*50 then n[e].added=true n[e].object=a do return end end end local e={added=true,object=a,startT=os.clock(),endT=os.clock()+d-GetLatency()/2e3}table.insert(n,e)end function OnCreateObj(e)if e and e.valid then if GetDistanceSqr(e)<Q.rangeSqr*2 then if e.name:find("Seed")then DelayAction(AddBall,0,{e})end end end end function OnDeleteObj(a)if a.name:find("Syndra_")and(a.name:find("_Q_idle.troy")or a.name:find("_Q_Lv5_idle.troy"))then for e=#n,1,-1 do if n[e].object and n[e].object.valid and GetDistanceSqr(n[e].object,a)<50*50 then table.remove(n,e)break end end end end function BTOnTick()for e=#n,1,-1 do if n[e].endT<=os.clock()then table.remove(n,e)end end end function BTOnDraw()local e=GetValidBalls()for n,e in ipairs(e)do DrawCircle(e['object']['x'],myHero.y,e['object']['z'],100,ARGB(255,255,255,255))end end function IsPet(e)return table.contains(b,e:lower())end function IsPetDangerous(e)return(e:lower()=="annietibbers")or(e:lower()=="heimertblue")end function AutoGrabPets()if W:IsReady()and W.status==0 then local e=GetPet(true)if e then W:Cast(e.x,e.z)if Menu.Debug.DebugCast then PrintChat("Grab pet by W")end end end end function GetPet(n)PosiblePets:update()for a,e in ipairs(PosiblePets.objects)do if e and e.valid and e.team~=myHero.team and IsPet(e.charName)and(not n or IsPetDangerous(e.charName))then return e end end end function GetWValidBall(o)local n=GetValidBalls()local a={}local e=GetPet(true)if e then return{object=e}end for n,e in ipairs(n)do if GetDistanceSqr(e.object,myHero.visionPos)<=W.rangeSqr then table.insert(a,e)end end local t=math.huge local n for a,e in ipairs(a)do if e.endT<t then n=e t=e.endT end end if n then return n end if o then return end e=GetPet()if e then return{object=e}end EnemyMinions:update()JungleMinions:update()PosiblePets:update()local e=MergeTables(MergeTables(EnemyMinions.objects,JungleMinions.objects),PosiblePets.objects)SelectUnits(e,function(e)return ValidTarget(e)and GetDistanceSqr(myHero.visionPos,e)<W.rangeSqr end)if e[1]then return{object=e[1]}end end function OnProcessSpell(n,e)if not VIP_USER and n==myHero then if e.name:lower():find("syndraq")then OnCastQ(e)elseif e.name:lower():find("syndrawcast")then OnCastW(e)elseif e.name:lower():find("syndraw")then OnCastWB(e)elseif e.name:lower():find("syndrae")or e.name:lower():find("syndrae5")then OnCastE(e)end end if(Menu.Harass.Enabled or Menu.Harass.Enabled2)and Menu.Harass.PP then if n.team~=myHero.team then if n.type==myHero.type and n~=nil then if e.name:lower():find("attack")then Harass(target)end end end end end function OnInterruptSpell(e,n)if GetDistanceSqr(e.visionPos,myHero.visionPos)<E.rangeSqr and E:IsReady()then if Q:IsReady()then StartEQCombo(e,false)else E:Cast(e.visionPos.x,e.visionPos.z)if Menu.Debug.DebugCast then PrintChat("Interrupt, E to cast pos")end end elseif GetDistanceSqr(e.visionPos,myHero.visionPos)<c*c and Q:IsReady()and E:IsReady()then StartEQCombo(e)end end function OnGapclose(e,n)if E:IsReady()and GetDistanceSqr(e)<E.rangeSqr*4 then Qdistance=300 StartEQCombo(e,true)end end function OnCastQ(e)local a={added=false,object={valid=true,x=e.endPos.x,y=myHero.y,z=e.endPos.z},startT=os.clock()+math.max(0,.25-GetDistance(myHero.visionPos,e.endPos)/1500)-GetLatency()/2e3,endT=os.clock()+d+1-GetLatency()/2e3}table.insert(n,a)if os.clock()-f<1.5 then CastSpell(_E,e.endPos.x,e.endPos.z)f=0 end Qdistance=nil EQTarget=nil h=0 end function OnCastW(e)if not VIP_USER then WTrack=0 end if m~=0 then DelayAction(E:Cast(e.endPos.x,e.endPos.z),o[_W])m=0 end end function OnCastWB(e)WTrack=1 end function OnCastE(e)end function StartEQCombo(e,n)if(Menu.EQ.Order==1 or n==false)and n~=true then h=os.clock()EQTarget=e Cast2Q(EQTarget)E:Cast(e.visionPos.x,e.visionPos.z)if Menu.Debug.DebugCast then PrintChat("Cast E to ball pos in direction of enemy (EQCombo)")end else f=os.clock()Cast2Q(e)end end function Cast2Q(e)if not Q:IsReady()then return end if GetDistanceSqr(e)>Q.rangeSqr then EQ.delay=Q.delay local n=Vector(myHero.visionPos)+Menu.EQ.Range*(Vector(e)-Vector(myHero.visionPos)):normalized()EQ:SetSource(n)local e,n,n=EQ:GetPrediction(e)local e=Vector(myHero.visionPos)+Menu.EQ.Range*(Vector(e)-Vector(myHero.visionPos)):normalized()Q:Cast(e.x,e.z)if Menu.Debug.DebugCast then PrintChat("Cast Q to max alllowed distance in the direction of enemy (EQCombo)")end else if Qdistance then local e=Vector(myHero.visionPos)+Qdistance*(Vector(e)-Vector(myHero.visionPos)):normalized()Q:Cast(e.x,e.z)if Menu.Debug.DebugCast then PrintChat("Cast Q in direction of enemy (EQ Combo)")end else Q:Cast(e)if Menu.Debug.DebugCast then PrintChat("Cast Q on enemy (EQ Combo)")end end end end function UseSpells(g,M,P,b,f,u)local n=STS:GetTarget(W.range)local d=STS:GetTarget(c)local c=STS:GetTarget(R.range)local h=false if u then n=u Wtarget=u d=u end if(os.clock()-C<10)then f=false end if M then if n and W.status==1 and(os.clock()-Q:GetLastCastTime()>.25)then if not VIP_USER then W:Cast(n)if Menu.Debug.DebugCast then PrintChat("Cast W on target in combo")end end if t~=nil and(t.charName==nil or t.charName:lower()~="heimertblue")then W:Cast(n)if Menu.Debug.DebugCast then PrintChat("Cast W on target in combo")end end elseif n and W.status==0 and(os.clock()-E:GetLastCastTime()>.7)and(os.clock()-Q:GetLastCastTime()>.7)then local e=GetWValidBall()if e then W:Cast(n)if Menu.Debug.DebugCast then PrintChat("Cast W on target for get ball")end end end if not n and d and E:IsReady()and W.status==1 and(t and t.name and t.name:find("Seed"))then EQ.delay=Q.range/E.speed+E.delay local n,e,e=EQ:GetPrediction(d)local e=Vector(myHero.visionPos)+Q.range*(Vector(n)-Vector(myHero.visionPos)):normalized()if GetDistance(n,e)<=(-.6*Q.range+966)then m=os.clock()if Menu.Debug.DebugCast then PrintChat("Throw ball in WE combo")end W:Cast(e.x,e.z)end end end if g then if n and os.clock()-W:GetLastCastTime()>.25 and os.clock()-E:GetLastCastTime()>.25 then VP.ShotAtMaxRange=true local e,n=VP:GetCircularAOECastPosition(n,(o[_Q]/Menu.Misc.PRQ),e[_Q],a[_Q],r[_Q],myHero)if n>=2 then Q:Cast(e.x,e.z)l=e if Menu.Debug.DebugCast then PrintChat("Cast Q on target in combo")end end VP.ShotAtMaxRange=false end end if b then if not n and d and E:IsReady()and Q:IsReady()then EQ.delay=Q.range/E.speed local n,n,e=EQ:GetPrediction(d)local n=Vector(myHero.visionPos)+Q.range*(Vector(e)-Vector(myHero.visionPos)):normalized()if GetDistance(e,n)<=(-.6*Q.range+966)then StartEQCombo(d)end end end if P and m==0 then local n=GetValidBalls()for a,t in ipairs(GetEnemyHeroes())do if ValidTarget(t)then local o,o,a=VP:GetPredictedPos(t,.25,QESpeed,myHero.visionPos,false)if a and a.z then for o,n in ipairs(n)do if GetDistanceSqr(n.object,myHero.visionPos)<Q.rangeSqr then local o=E.delay+GetDistance(myHero.visionPos,n.object)/E.speed local o=r[i]local r=Vector(n.object)+(100+(-.6*GetDistance(n.object,myHero.visionPos)+966))*(Vector(n.object)-Vector(myHero.visionPos)):normalized()local o=Vector(n.object)-100*(Vector(n.object)-Vector(myHero.visionPos)):normalized()local s,r,o=VectorPointProjectionOnLineSegment(o,r,a)if o and GetDistanceSqr(r,a)<=(e[i]+VP:GetHitBox(t))^2 then CastSpell(_E,n.object.x,n.object.z)if Menu.Debug.DebugCast then PrintChat("Cast E to ball in direction of enemys in combo")end end end end end end end end if c and f then if DLib:IsKillable(n,GetCombo())or(os.clock()-s<10)then ItemManager:CastOffensiveItems(c)DFG=ItemManager:GetItem("DFG"):GetSlot()if DFG and myHero:CanUseSpell(DFG)==READY then h=true end end if _IGNITE and GetDistanceSqr(n.visionPos,myHero.visionPos)<600*600 and(DLib:IsKillable(c,GetCombo())or(os.clock()-s<10))then CastSpell(_IGNITE,c)if Menu.Debug.DebugCast then PrintChat("Cast ignite on target")end end end if f and not Q:IsReady()and R:IsReady()and not h then for n,e in ipairs(GetEnemyHeroes())do if ValidTarget(e)and(not Menu.R.Targets[e.hash]or(os.clock()-s<10))and GetDistanceSqr(e.visionPos,myHero.visionPos)<R.rangeSqr then if DLib:IsKillable(e,GetCombo())or(os.clock()-s<10)then if not DLib:IsKillable(e,{_Q,_E,_W})and DLib:IsKillable(e,GetCombo())or(os.clock()-s<10)then if not HasBuff(e,"UndyingRage")and not HasBuff(e,"JudicatorIntervention")then R:Cast(e)if Menu.Debug.DebugCast then PrintChat("UR FACE MY BALLS (R in combo) to target: "..e.charName)end end end end end end end end function Farm()if(Menu.Farm.ManaCheck>(myHero.mana/myHero.maxMana)*100 and Menu.Farm.LaneClear)or(Menu.Farm.ManaCheck2>(myHero.mana/myHero.maxMana)*100 and Menu.Farm.Freeze)then return end EnemyMinions:update()local s=Menu.Farm.LaneClear and(Menu.Farm.UseQ>=3)or(Menu.Farm.UseQ==2 or Menu.Farm.UseQ==4)local r=Menu.Farm.LaneClear and(Menu.Farm.UseW>=3)or(Menu.Farm.UseW==2 or Menu.Farm.UseW==4)local l=Menu.Farm.LaneClear and(Menu.Farm.UseE>=3)or(Menu.Farm.UseE==2 or Menu.Farm.UseE==4)local t=SelectUnits(EnemyMinions.objects,function(e)return(e.charName:lower():find("wizard")or e.charName:lower():find("caster"))and ValidTarget(e)and GetDistanceSqr(e)<W.rangeSqr end)local n=SelectUnits(EnemyMinions.objects,function(e)return(e.charName:lower():find("basic")or e.charName:lower():find("cannon"))and ValidTarget(e)and GetDistanceSqr(e)<W.rangeSqr end)if r and W:IsReady()then if W.status==0 then if#n>1 then W:Cast(n[1].x,n[1].z)if Menu.Debug.DebugCast then PrintChat("Cast W to first melee minion")end elseif#t>1 then W:Cast(t[1].x,t[1].z)if Menu.Debug.DebugCast then PrintChat("Cast W to first caster minion")end end else local o,r=GetBestCircularFarmPosition(a[_W],e[_W]*1.1,t)local e,a=GetBestCircularFarmPosition(a[_W],e[_W]*1.1,n)if r>2 or(o and#t<=2)then W:Cast(o.x,o.z)if Menu.Debug.DebugCast then PrintChat("Cast W on best hit position (Caster)")end elseif a>2 or(e and#n<=2)then W:Cast(e.x,e.z)if Menu.Debug.DebugCast then PrintChat("Cast W on best hit position (Melee)")end end end end if s and(not r or W.status==0)and Q:IsReady()then t=GetPredictedPositionsTable(VP,t,o[_Q],e[_Q],a[_Q]+e[_Q],math.huge,myHero,false)n=GetPredictedPositionsTable(VP,n,o[_Q],e[_Q],a[_Q]+e[_Q],math.huge,myHero,false)local t,o=GetBestCircularFarmPosition(a[_Q]+e[_Q],e[_Q],t)local e,n=GetBestCircularFarmPosition(a[_Q]+e[_Q],e[_Q],n)if t and o>1 then CastSpell(_Q,t.x,t.z)if Menu.Debug.DebugCast then PrintChat("Cast Q on best hit position (Caster)")end elseif e and n>1 then CastSpell(_Q,e.x,e.z)if Menu.Debug.DebugCast then PrintChat("Cast Q on best hit position (Melee)")end end end if l and(not Q:IsReady()or not s)and E:IsReady()then local r=SelectUnits(EnemyMinions.objects,function(e)return ValidTarget(e)and GetDistanceSqr(e)<E.rangeSqr end)local n,a=GetBestCircularFarmPosition(E.range,e[_Q],r)if a>4 then E:Cast(n.x,n.z)if Menu.Debug.DebugCast then PrintChat("Cast E if hit >4 minions")end else local n=GetValidBalls()local t=0 local o for a,n in ipairs(n)do if GetDistanceSqr(n.object,myHero.visionPos)<Q.rangeSqr then local a=0 for t,o in ipairs(r)do local t=Vector(n.object)+(100+(-.6*GetDistance(n.object,myHero.visionPos)+966))*(Vector(n.object)-Vector(myHero.visionPos)):normalized()local n=Vector(myHero.visionPos)local o,n,t=VectorPointProjectionOnLineSegment(n,t,o)if t and GetDistanceSqr(n,enemyPos)<e[i]*e[i]then a=a+1 end end if a>t then t=a o=Vector(n.object)end end end if t>2 then E:Cast(o.x,o.z)if Menu.Debug.DebugCast then PrintChat("Cast E in farm counting balls")end end end end end function JungleFarm()JungleMinions:update()local o=Menu.JungleFarm.UseQ local r=Menu.JungleFarm.UseW local t=Menu.JungleFarm.UseE local n=SelectUnits(JungleMinions.objects,function(e)return GetDistanceSqr(e)<=W.rangeSqr and ValidTarget(e)end)local e=SelectUnits(JungleMinions.objects,function(e)return ValidTarget(e)end)local n=n[1]local a=e[1]if not n and os.clock()-Q:GetLastCastTime()>.5 then W:Cast(myHero.x,myHero.z)end if WStatus=="JungleSteal"then W:Cast(myHero.x,myHero.z)WStatus=nil end if ValidTarget(n)then local e=GetTarget()if e and e.type==n.type then DrawJungleStealingIndicator=true SOWi:DisableAttacks()if ValidTarget(e)and DLib:IsKillable(e,{_W})and GetDistanceSqr(myHero.visionPos,e)<=W.rangeSqr and W:IsReady()then if WStatus==nil then W:Cast(e.x,e.z)WStatus="JungleSteal"end end else if o and Q:IsReady()then Q:Cast(n)end if r then local e=nil local a=GetValidBalls()for a,n in ipairs(a)do e=n end if(os.clock()-Q:GetLastCastTime()>Q.delay+.1)and WStatus==nil and e~=nil then DelayAction(function()return W:Cast(e.object.x,e.object.z)end,.1)WStatus="HaveBall"elseif WStatus=="HaveBall"then local e=nil for a,n in ipairs(JungleMinions.objects)do for a=1,12 do if n.name==P[a]then e=n end end end if not e~=nil then e=n end WStatus=nil W:Cast(e.x,e.z)end end if t and os.clock()-Q:GetLastCastTime()>1 then E:Cast(n)end end elseif ValidTarget(a)and GetDistanceSqr(a)<=(Q.range+588)^2 and GetDistanceSqr(a)>Q.rangeSqr and DLib:IsKillable(a,{_E})then if Q:IsReady()and E:IsReady()then local e=Vector(myHero.visionPos)+Q.range*(Vector(a)-Vector(myHero)):normalized()Q:Cast(e.x,e.z)f=os.clock()end end end function UpdateSpellData()if E.width~=2*e[_E]and E:GetLevel()==5 then E.width=2*e[_E]end if R.range~=(a[_R]+75)and R:GetLevel()==5 then R:SetRange(a[_R]+75)end if VIP_USER then W.status=t and 1 or 0 else W.status=WTrack end end function Combo()SOWi:DisableAttacks()if not Q:IsReady()and(not W:IsReady()or not E:IsReady())then SOWi:EnableAttacks()end UseSpells(Menu.Combo.UseQ,Menu.Combo.UseW,Menu.Combo.UseE,Menu.Combo.UseEQ,Menu.Combo.UseR)end function Harass(e)if Menu.Harass.ManaCheck>(myHero.mana/myHero.maxMana)*100 then return end UseSpells(Menu.Harass.UseQ,Menu.Harass.UseW,Menu.Harass.UseE,Menu.Harass.UseEQ,false,e)end function OnTick()l=nil DrawJungleStealingIndicator=false BTOnTick()SOWi:EnableAttacks()DLib.combo=GetCombo()UpdateSpellData()DrawEQIndicators=false if os.clock()-W:GetLastCastTime()>1 and not W:IsReady()then WStatus=nil end if Menu.Combo.Enabled then Combo()elseif(Menu.Harass.Enabled or Menu.Harass.Enabled2)and not Menu.Harass.PP then Harass()end if Menu.Farm.LaneClear or Menu.Farm.Freeze then Farm()end if Menu.JungleFarm.Enabled then JungleFarm()end if Menu.R.UseR then local e=STS:GetTarget(R.range)if e then R:Cast(e)end end if Menu.Misc.WPet then AutoGrabPets()end if Menu.R.DontUseR then C=os.clock()s=0 end if Menu.R.CastR then s=os.clock()C=0 end if Menu.Misc.MEQ and Q:IsReady()and E:IsReady()then DrawEQIndicators=true local n=GetEnemyHeroes()local e local t=200*200 for a,n in ipairs(n)do local a=GetDistanceSqr(mousePos,n)if ValidTarget(n)and a<t then e=n t=a end end if e and GetDistanceSqr(e,myHero.visionPos)<(c+300)^2 then if GetDistanceSqr(e)<Q.rangeSqr then StartEQCombo(e,true)else StartEQCombo(e)end end end end function GetDistanceToClosestHero(a)local e=math.huge for t,n in ipairs(GetEnemyHeroes())do if ValidTarget(n)then e=math.min(e,GetDistanceSqr(a,n))end end return e end function OnDraw()if Menu.Debug.DebugBall==2 then BTOnDraw()end if DrawEQIndicators then DrawCircle3D(mousePos.x,mousePos.y,mousePos.z,200,3,GetDistanceToClosestHero(mousePos)<200*200 and ARGB(200,255,0,0)or ARGB(200,0,255,0),20)end if GetTarget()and GetTarget().type=='obj_AI_Minion'and GetTarget().team==TEAM_NEUTRAL then DrawCircle3D(GetTarget().x,GetTarget().y,GetTarget().z,100,2,Menu.JungleFarm.Enabled and ARGB(175,255,0,0)or ARGB(175,0,255,0),25)end if DrawJungleStealingIndicator then local e=GetEnemyHPBarPos(myHero)+Vector(20,-4)e.x=math.floor(e.x)e.y=math.floor(e.y)DrawText(tostring("JungleStealing"),16,e.x+1,e.y+1,ARGB(255,0,0,0))DrawText(tostring("JungleStealing"),16,e.x,e.y,ARGB(255,255,255,255))end if Menu.Harass.Enabled2 then local e=GetEnemyHPBarPos(myHero)+Vector(0,-4)e.x=math.floor(e.x)e.y=math.floor(e.y)DrawText(tostring("AH"),16,e.x+1,e.y+1,ARGB(255,0,0,0))DrawText(tostring("AH"),16,e.x,e.y,ARGB(255,255,255,255))end if l~=nil and Menu.Debug.DebugQ then DrawCircle3D(l.x,l.y,l.z,100,3,ARGB(200,255,111,111),20)end end"), nil, "bt", _ENV))()
  
  
